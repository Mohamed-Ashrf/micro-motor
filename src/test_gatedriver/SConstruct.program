# Copyright (c) 2017-2018, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python

import os
from os.path import join, abspath

rootpath = "modm"

env = Environment(
        toolpath=[join(rootpath, "scons", "site_tools"),
                  join(rootpath, "ext", "dlr", "scons-build-tools", "site_tools")],


        tools=[
            "compiler_arm_none_eabi_gcc",
            "settings_buildpath",
            "utils_buildformat",
            "utils_buildsize",
            "program_openocd",
            ],
        CPU="cortex-m4",
        CFLAGS_language=["-std=gnu99"],
        LINKFLAGS_optimize=[
            "-Wl,--relax",
            "-Wl,--gc-sections",
            "-Wl,-wrap,_malloc_r",
            "-Wl,-wrap,_calloc_r",
            "-Wl,-wrap,_realloc_r",
            "-Wl,-wrap,_free_r",
            "--specs=nano.specs",
            "--specs=nosys.specs",
            "-nostartfiles",
            ],
        ENV=os.environ)

#env.Append(CCFLAGS_warning=["-Werror"])
env.Append(LINKFLAGS_other=["-Wl,--no-wchar-size-warning"])
env.Append(LINKFLAGS_target=[
    "-Lmodm/link",
    "-Tlinkerscript.ld",
    ])




env.RemoveFromList("CCFLAGS_warning", [
    "-Wshadow",
    "-Wcast-align",
    "-Wmissing-declarations",
    "-Wcast-qual",
    "-Wredundant-decls",])
env.RemoveFromList("CXXFLAGS_warning", [
    "-Wold-style-cast",
    "-Wnon-virtual-dtor"])

# User Config Options
env["BASEPATH"]  = abspath(rootpath)
env["BUILDPATH"] = abspath("build")

library = env.SConscript(join(rootpath, "SConscript"), exports="env")

# FIXME: better globbing! (recursive?)
files = env.Glob("*.cpp")
files += env.Glob("*/*.cpp")
# Needed for communication examples for generated postman include paths!
env.Append(CPPPATH=["."])
program = env.Program(target="project.elf", source=files)

env.Alias("symbols", env.Symbols(program))
env.Alias("size", env.Size(program))
env["CONFIG_OPENOCD_SEARCHDIRS"] = []
env["CONFIG_OPENOCD_CONFIGFILES"] = [
'../openocd.cfg'
]
env["CONFIG_OPENOCD_COMMANDS"] = [
    "init",
    "reset halt",
    "flash write_image erase $SOURCE",
    "reset halt",
    "mww 0xE000EDF0 0xA05F0000",
    "shutdown"
]
if "CONFIG_OPENOCD_COMMANDS" in env:
    env.Alias("program", env.OpenOcd(program))
hexfile = env.Hex(program)

env.Alias("build", [hexfile, env.Listing(program)])
env.Alias("all", ["build", "size"])
env.Default("all")
